{
  "data": {
    "createdAt": "2025-05-05T17:48:07.389Z",
    "updatedAt": "2025-05-15T19:28:06.169Z",
    "id": "w2qybtvMEVOQ9LnT",
    "name": "Base de Conhecimento - Dani",
    "active": false,
    "nodes": [
      {
        "parameters": {
          "inputSource": "passthrough"
        },
        "type": "n8n-nodes-base.executeWorkflowTrigger",
        "typeVersion": 1.1,
        "position": [
          -840,
          -120
        ],
        "id": "1a962f5a-ccf7-4c63-ac7b-80791685ca84",
        "name": "Execute"
      },
      {
        "parameters": {
          "resource": "assistant",
          "operation": "list",
          "simplify": false
        },
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "typeVersion": 1.8,
        "position": [
          -600,
          -120
        ],
        "id": "1719318b-5611-4272-ae69-f4b260a5cbf3",
        "name": "Get Assistant",
        "credentials": {
          "openAiApi": {
            "id": "Ns5Dn4K7TRUo6yE8",
            "name": "OpenAi - Dani"
          }
        }
      },
      {
        "parameters": {
          "url": "=https://api.openai.com/v1/vector_stores/{{ $('Vector Store').first().json.vs_id }}/files",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "OpenAI-Beta",
                "value": "assistants=v2"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          -120,
          -120
        ],
        "id": "f5f63160-2f3b-45e4-a42e-3d5c4691970f",
        "name": "Arquivos Vector Store",
        "retryOnFail": true,
        "credentials": {
          "openAiApi": {
            "id": "Ns5Dn4K7TRUo6yE8",
            "name": "OpenAi - Dani"
          }
        }
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "7a6022db-fca7-4dad-8515-4d72e4e4f1b5",
                "name": "vazio",
                "value": "={{ $json.data.isEmpty() }}",
                "type": "boolean"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          120,
          -120
        ],
        "id": "50dcf6a0-c861-44e0-ba2a-1e9ff0cce300",
        "name": "Vazio"
      },
      {
        "parameters": {
          "resource": "fileFolder",
          "filter": {
            "folderId": {
              "__rl": true,
              "value": "=1AQvY5-mNiVA2AIBqFVZtNCbFlDE_1sgB",
              "mode": "id"
            }
          },
          "options": {
            "fields": [
              "id",
              "name",
              "mimeType"
            ]
          }
        },
        "type": "n8n-nodes-base.googleDrive",
        "typeVersion": 3,
        "position": [
          340,
          -120
        ],
        "id": "0d3b80a4-ec61-49eb-a46f-8c1d1c1b6e66",
        "name": "Files - Drive",
        "executeOnce": true,
        "alwaysOutputData": true,
        "credentials": {
          "googleDriveOAuth2Api": {
            "id": "3lQM3JcoG2K4jAcw",
            "name": "Drive - IA Blips"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict",
              "version": 2
            },
            "conditions": [
              {
                "id": "083cf557-f79e-4697-8721-538379681109",
                "leftValue": "={{ $json }}",
                "rightValue": "",
                "operator": {
                  "type": "object",
                  "operation": "empty",
                  "singleValue": true
                }
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "type": "n8n-nodes-base.if",
        "typeVersion": 2.2,
        "position": [
          560,
          -120
        ],
        "id": "ca7fae51-0a17-4f1e-b41c-78e45693211e",
        "name": "Drive vazio?"
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "32b2b8ad-960c-4722-9f80-dd1c010a7273",
                "name": "sucesso",
                "value": false,
                "type": "boolean"
              },
              {
                "id": "0634f9fd-6bc6-48cf-8f7a-34c3da727ccc",
                "name": "erro",
                "value": "Pasta do drive vazio, conhecimentos atuais foram maentidos",
                "type": "string"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          820,
          -320
        ],
        "id": "7a82a72a-9eb4-4309-8d23-abd689daed93",
        "name": "Erro"
      },
      {
        "parameters": {
          "operation": "pdf",
          "options": {}
        },
        "type": "n8n-nodes-base.extractFromFile",
        "typeVersion": 1,
        "position": [
          1080,
          -100
        ],
        "id": "b805657d-06aa-4129-b680-9ba082701a84",
        "name": "Extract from File"
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "ca8829a0-4a06-4255-8ad3-b92c766db3df",
                "name": "sections",
                "value": "={{ $json.text.split('#').map(section => section.trim()).filter(section => section.length > 0) }}",
                "type": "array"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          1320,
          -100
        ],
        "id": "9006357f-ae67-4685-ad0e-de21a57a50ee",
        "name": "Se√ß√µes Arquivo"
      },
      {
        "parameters": {
          "fieldToSplitOut": "sections",
          "options": {}
        },
        "type": "n8n-nodes-base.splitOut",
        "typeVersion": 1,
        "position": [
          1540,
          -100
        ],
        "id": "28563743-babd-4966-b642-9507f82f42c8",
        "name": "Split Out"
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "adc276b8-b51c-400c-8eb0-f4f78e9df1ae",
                "name": "section",
                "value": "={{ $json.sections }}",
                "type": "string"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          1760,
          -100
        ],
        "id": "234f5ed7-5e2c-41f7-9bc1-2f417c5f6ead",
        "name": "Se√ß√£o"
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "={{ $json.section }}",
          "hasOutputParser": true,
          "messages": {
            "messageValues": [
              {
                "message": "=# üìå Classifica√ß√£o de Se√ß√£o de Atendimento  \n\nVoc√™ √© um especialista em **classifica√ß√£o de textos** e deve **determinar a categoria** de uma se√ß√£o de atendimento com base em seu conte√∫do, al√©m de **definir uma subclasse relevante** para ela.  \n\nSua tarefa √© **analisar** o texto fornecido e classific√°-lo como uma das categorias abaixo, criando tamb√©m uma subclasse, conforme as diretrizes:\n\n---\n\n## üè∑Ô∏è Defini√ß√µes das Classes\n### üìñ 1. Regras de Atendimento\n\nConjunto de diretrizes, protocolos e melhores pr√°ticas que **padronizam o atendimento no RH**. Engloba orienta√ß√µes sobre **fluxos de intera√ß√£o, posturas recomendadas** e **procedimentos gerais** a serem seguidos de forma consistente, garantindo uma **experi√™ncia uniforme e de qualidade ao colaborador ou candidato**.\n\n\n### üéØ 2. Situa√ß√µes Espec√≠ficas de Atendimento\n\nCasos at√≠picos que **exigem abordagens diferenciadas**, incluindo **exce√ß√µes √†s regras gerais**. Abrange cen√°rios especiais, como **condi√ß√µes contratuais espec√≠ficas, negocia√ß√µes salariais** e **processos seletivos diferenciados**, que **demandam flexibilidade no atendimento**.\n\n### ‚öôÔ∏è 3. Instala√ß√£o\n\nConjunto de regras, instru√ß√µes e diretrizes relacionadas √† **prepara√ß√£o de equipamentos e acessos para novos colaboradores**. Inclui orienta√ß√µes que garantem a correta **configura√ß√£o das ferramentas de trabalho**, **integra√ß√£o ao ambiente corporativo** e **suporte inicial**.\n\n### üìÑ 4. Documenta√ß√£o\n\nConjunto de regras, instru√ß√µes e diretrizes relacionadas √† **coleta, envio, valida√ß√£o e aprova√ß√£o** de documentos necess√°rios para a **admiss√£o e gest√£o de pessoas**, assegurando **conformidade e agilidade nos processos do RH**.\n\n---\n\n## üí° Defini√ß√µes das Subclasses\n\n### üìñ 1. Regras de Atendimento  \nSe o texto for classificado como **Regras de Atendimento**, ele deve ser enquadrado em uma das seguintes subclasses:  \n\n- **In√≠cio do Atendimento**  \n  - *Inclui sauda√ß√£o, identifica√ß√£o e contextualiza√ß√£o do cliente. O assistente cumprimenta o cliente, apresenta-se e coleta informa√ß√µes essenciais para compreender o contexto da intera√ß√£o.*  \n\n- **Personalidade e Estilo de Comunica√ß√£o**  \n  - *Define o tom e a abordagem da IA durante a conversa, orientando sobre formalidade, empatia e identidade da empresa.*  \n\n- **Perguntas Frequentes e Procedimentos Padr√£o**  \n  - *Diretrizes para solucionar d√∫vidas e problemas comuns, como d√∫vidas sobre entrega, rastreio, acesso a plataforma, d√∫vidas sobre os equipamentos al√©m dos protocolos para encaminhamento a um atendente humano, garantindo solu√ß√µes claras e objetivas.*  \n\n- **Encerramento e Feedback**  \n  - *Instru√ß√µes sobre a finaliza√ß√£o do atendimento, incluindo recapitula√ß√£o dos pontos principais, agradecimento e coleta de feedback.*  \n\n---\n\n### üéØ 2. Situa√ß√µes Espec√≠ficas de Atendimento  \nSe o texto for classificado como **Situa√ß√µes Espec√≠ficas de Atendimento**, ele deve ser enquadrado em uma das seguintes subclasses:  \n\n- **Status ou Fase da Negocia√ß√£o**  \n  - *Refere-se ao est√°gio atual da negocia√ß√£o na plataforma (ex: \"Em cadastro\", \"An√°lise de documentos\", \"Conclu√≠do\"). A IA deve adaptar a abordagem conforme o status registrado.*  \n\n- **Condi√ß√µes Comerciais e Contratuais**  \n  - *Situa√ß√µes em que o atendimento varia de acordo com regras comerciais ou contratuais espec√≠ficas.*  \n\n- **Condi√ß√µes Financeiras Espec√≠ficas**  \n  - *Quest√µes relacionadas a pagamentos, prazos especiais, descontos, parcelamentos ou ajustes financeiros, assegurando que o cliente compreenda corretamente as condi√ß√µes aplic√°veis.*  \n\n---\n\n### ‚öôÔ∏è 3. Instala√ß√£o  \nSe o texto for classificado como **Instala√ß√£o**, ele deve ser enquadrado em uma das seguintes subclasses:  \n\n- **Checklist de Instala√ß√£o**  \n  - *Verifica√ß√£o t√©cnica e confirma√ß√£o dos requisitos f√≠sicos e operacionais no local de instala√ß√£o.*  \n\n- **Agendamento de Instala√ß√£o**  \n  - *Orienta√ß√µes sobre como e quando agendar a instala√ß√£o (remota ou presencial).*  \n\n- **Ativa√ß√£o e Configura√ß√£o do Equipamento**  \n  - *Procedimentos para ativa√ß√£o dos recursos e configura√ß√£o inicial (Auto Clean, aquecedores, alinhamento de impress√£o etc.).*  \n\n- **Suporte T√©cnico de Instala√ß√£o**  \n  - *Instru√ß√µes para o suporte t√©cnico no momento da instala√ß√£o, incluindo links de tutoriais e suporte remoto.*  \n\n---\n\n### üìÑ 4. Documenta√ß√£o  \nSe o texto for classificado como **Documenta√ß√£o**, ele deve ser enquadrado em uma das seguintes subclasses:  \n\n- **Solicita√ß√£o de Documenta√ß√£o**  \n  - *Regras sobre quais documentos o cliente deve enviar e em que momento (RG/CNH, comprovante de resid√™ncia, etc.).*  \n\n- **An√°lise e Valida√ß√£o de Documenta√ß√£o**  \n  - *Processo de checagem dos documentos recebidos, identificando pend√™ncias ou inconformidades.*  \n\n- **Pend√™ncias Documentais e Regulariza√ß√£o**  \n  - *A√ß√µes relacionadas √† corre√ß√£o de documentos pendentes ou reenvio por parte do cliente.*  \n\n- **Confirma√ß√£o de Documenta√ß√£o Aprovada**  \n  - *Comunica√ß√£o formal de que a documenta√ß√£o foi aprovada, liberando a pr√≥xima etapa do processo.*  \n\n---\n\n## üìå Instru√ß√µes para Classifica√ß√£o  \n\n1. **Leia atentamente** o texto fornecido.  \n2. **Compare** seu conte√∫do com as defini√ß√µes das classes e subclasses.  \n3. **Leia cuidadosamente** os dois textos fornecidos.\n4. **Compare ambos com as defini√ß√µes das classes e subclasses fornecidas.**\n5. **Classifique obrigatoriamente da seguinte forma**:\n   - O texto **mais adaptado √†s instru√ß√µes e diretrizes de uso pela IA** deve ser classificado como:  \n     **Classe**: `\"Regras de Atendimento\"`\n   - O texto **seguinte, mesmo que trate de conte√∫do semelhante**, deve ser classificado como:  \n     **Classe**: `\"B√°sico - Recursos Humanos\"`\n6. **Sempre atribua uma subclasse coerente ao conte√∫do de cada texto.**\n7. **Nunca inverta a ordem das classes, mesmo que os conte√∫dos pare√ßam pertencer √† mesma categoria.**\n8. **N√£o forne√ßa justificativas ou explica√ß√µes adicionais.**\n\n9. **Atribua uma subclasse** correspondente ao conte√∫do do texto.  \n10. N√£o forne√ßa justificativas ou explica√ß√µes adicionais.\n\n‚ö†Ô∏è **Formato da Resposta:**  \nRetorne a resposta em **JSON**, com os campos:  \n- `class`: Categoria do texto  \n- `subclass`: Subclasse mais espec√≠fica, indicando a natureza exata da se√ß√£o  \n\n‚ö†Ô∏è **Importante:**  \n- N√£o forne√ßa justificativas ou explica√ß√µes adicionais.  \n- A subclasse deve ser **objetiva** e **precisa** para refletir corretamente o conte√∫do da se√ß√£o.  \n\n---\n\n## ‚úÖ Exemplo  \n\nüìå **Texto fornecido:**  \n*\"Ap√≥s a entrega do equipamento, solicite que o cliente informe duas datas e hor√°rios para agendamento da instala√ß√£o.\"*  \n\n‚úÖ **Resposta esperada:**  \n{\n  \"class\": \"Instala√ß√£o\",\n  \"subclass\": \"Agendamento de Instala√ß√£o\"\n}\n\n## üéØ Objetivo da Classifica√ß√£o  \nEste sistema visa **padronizar a categoriza√ß√£o** dos conte√∫dos de atendimento, garantindo **uniformidade na aplica√ß√£o das regras** e na **gest√£o eficiente de exce√ß√µes**.  "
              }
            ]
          }
        },
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "typeVersion": 1.5,
        "position": [
          2000,
          20
        ],
        "id": "6827c78c-abf3-41f6-8491-4bef0cc2056a",
        "name": "Basic LLM Chain",
        "onError": "continueErrorOutput"
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "f9686a54-606a-4bab-b48d-b54390c1de93",
                "name": "section",
                "value": "={{ $('Se√ß√£o').item.json.section.trim() }}",
                "type": "string"
              },
              {
                "id": "40f5f541-c915-4467-ab39-78315ffde320",
                "name": "class",
                "value": "={{ $json.output.class.trim() }}",
                "type": "string"
              },
              {
                "id": "304ee446-5c29-474d-b742-d1cea453dd08",
                "name": "subclass",
                "value": "={{ $json.output.subclass.trim() }}",
                "type": "string"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          2480,
          -200
        ],
        "id": "952166e0-c839-4870-9def-9e5a144fc35d",
        "name": "Classifica√ß√£o"
      },
      {
        "parameters": {
          "jsCode": "const groupedItems = {};\n\nfor (const item of items) {\n  const className = item.json.class;\n  const subclass = item.json.subclass;\n  const key = `${className}|${subclass}`; // Chave √∫nica por classe+subclasse\n  \n  if (!groupedItems[key]) {\n    groupedItems[key] = {\n      class: className,\n      subclass: subclass,\n      text: item.json.section\n    };\n  } else {\n    groupedItems[key].text += '\\n\\n' + item.json.section; // Separa com quebra de linha dupla\n  }\n}\n\nreturn Object.values(groupedItems).map(item => ({ json: item }));"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          2700,
          -200
        ],
        "id": "3b48baac-ca27-48fb-8c30-6ba96d5deb13",
        "name": "Subclass"
      },
      {
        "parameters": {
          "mode": "combine",
          "combineBy": "combineByPosition",
          "options": {}
        },
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3,
        "position": [
          2280,
          -200
        ],
        "id": "8de7e984-f2f0-49ca-b9d6-a0ff6189773c",
        "name": "Merge"
      },
      {
        "parameters": {
          "schemaType": "manual",
          "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"class\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"subclass\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t}\n}"
        },
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "typeVersion": 1.2,
        "position": [
          2180,
          220
        ],
        "id": "0101a495-9d97-4663-8f63-d662aed92476",
        "name": "Structured Output Parser"
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "2526733b-46c4-416b-88a0-cd75afdcb4f4",
                "name": "Erro",
                "value": "Houve um erro, por favor tentar novamente",
                "type": "string"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          3180,
          240
        ],
        "id": "2c314e4b-85ea-4a23-aae1-5ffc23cbd8ce",
        "name": "Erro - LLM"
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=Entrada:\n  - Classe: {{ $json.class }}\n  - T√≠tulo da se√ß√£o: {{ $json.subclass }}\n  - Texto a ser estruturado: {{ $json.text }}",
          "hasOutputParser": true,
          "messages": {
            "messageValues": [
              {
                "message": "=# Prompt para Convers√£o de Texto em Markdown com JSON\n\nVoc√™ √© um modelo de linguagem avan√ßado cuja **tarefa** √© **transformar um texto fornecido** (defini√ß√£o de uma *subclasse*) em um **documento Markdown bem estruturado**, **fiel ao conte√∫do original**, sem adicionar ou inventar qualquer informa√ß√£o mas melhorando a estrutura. Em seguida, deve encapsular esse documento em um objeto JSON espec√≠fico. **Siga rigorosamente as diretrizes abaixo para garantir um output de alta qualidade, sintaticamente v√°lido e estritamente aderente ao conte√∫do fornecido.**\n\n---\n\n## Diretrizes Gerais\n\n- O conte√∫do do Markdown deve ser **exclusivamente** baseado no **texto fornecido**. **N√£o adicione**, **n√£o invente**, **n√£o infira** informa√ß√µes que n√£o estejam expressamente presentes no texto original, s√≥ melhore a estrutura.  \n- Se algum item solicitado na estrutura√ß√£o n√£o puder ser preenchido por falta de conte√∫do no texto original, **deixe-o em branco ou omita respeitando a l√≥gica e integridade do conte√∫do**.  \n- **Nunca** elabore conte√∫dos gen√©ricos ou inventados para \"preencher\" o documento.\n\n---\n\n## Formato da Resposta OBRIGAT√ìRIO (JSON)\n\nA **resposta final** deve ser OBRIGATORIAMENTE um **objeto JSON v√°lido** contendo **exatamente dois campos**:\n\n- `\"class\"`: o nome da subclasse fornecido na entrada.\n- `\"markdown\"`: uma string com o texto formatado em Markdown, estruturado conforme as instru√ß√µes.\n\n### Restri√ß√µes:\n- **N√£o** inclua nenhum texto ou explica√ß√£o fora do objeto JSON.\n- **N√£o** use prefixos como ‚ÄúAqui est√° o JSON:‚Äù ou similares.\n- **N√£o** envolva o conte√∫do Markdown em blocos de c√≥digo (```markdown, ```json, etc.). Insira o Markdown puro como valor da chave `\"markdown\"`.\n- O JSON deve ser **sintaticamente v√°lido**, com o conte√∫do Markdown devidamente escapado para garantir a integridade do JSON.\n\n---\n\n## Estrutura do Markdown\n\n### T√≠tulo Principal\n- Insira um **t√≠tulo de n√≠vel 1** no in√≠cio do conte√∫do Markdown, utilizando a sintaxe `# T√≠tulo`.\n- O t√≠tulo **deve ser exatamente o nome da classe fornecida**.\n\n### Organiza√ß√£o do Conte√∫do\n- **Respeite a estrutura l√≥gica do texto original**:\n  - Utilize `##` para se√ß√µes principais e `###` para subse√ß√µes, **apenas se essas divis√µes estiverem impl√≠citas ou expl√≠citas no texto original**.\n- **Par√°grafos curtos**, com **3 a 5 frases** no m√°ximo, sempre **fi√©is** ao texto fornecido.\n- **Listas**, **√™nfases** e **formata√ß√µes** devem ser usadas **apenas quando a estrutura ou conte√∫do original justificar**:\n  - Listas n√£o ordenadas (`-`) para itens soltos.\n  - Listas numeradas (`1.`, `2.`) para sequ√™ncias expl√≠citas.\n  - **Negrito** (`**`) e *it√°lico* (`*`) devem ser aplicados **somente se o texto original indicar necessidade de destaque**.\n\n---\n\n## Exemplo de Sa√≠da JSON (Ilustrativo)\n{\n  \"class\": \"NomeDaClasseExemplo\",\n  \"markdown\": \"# NomeDaClasseExemplo\\nTexto fiel √† descri√ß√£o original da subclasse fornecida.\\n\\n## Se√ß√£o Original do Texto\\n- Item explicitamente listado no conte√∫do original.\\n- Outro item fornecido.\\n\\n## Outra Se√ß√£o\\n1. Primeiro passo descrito no texto.\\n2. Segundo passo conforme fornecido.\\n\\n> Cita√ß√£o exatamente como aparece no texto original.\\n\"\n}\n\n### Regras de Fidelidade ao Conte√∫do\n- **N√£o reescreva nem melhore o texto**: apenas reestruture o que foi dado.\n- Caso o conte√∫do original seja curto ou n√£o possua se√ß√µes claras, **apenas organize o texto como par√°grafos simples**, sem criar se√ß√µes artificiais."
              }
            ]
          }
        },
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "typeVersion": 1.5,
        "position": [
          2900,
          -200
        ],
        "id": "8eff220f-3d86-4ed4-9f82-ebdc1bc77496",
        "name": "Basic LLM Chain1",
        "onError": "continueErrorOutput"
      },
      {
        "parameters": {
          "schemaType": "manual",
          "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"class\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"markdown\": {\n\t\t\t\"type\": \"string\"\n        }\n\t}\n}"
        },
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "typeVersion": 1.2,
        "position": [
          3060,
          20
        ],
        "id": "7a01ddf5-9e7d-450b-b892-e2e71c7021aa",
        "name": "Structured Output Parser1"
      },
      {
        "parameters": {
          "resource": "file",
          "options": {
            "purpose": "assistants"
          }
        },
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "typeVersion": 1.8,
        "position": [
          3740,
          -220
        ],
        "id": "16a8ed27-0be7-48b3-83ee-90f201470d71",
        "name": "Upload Novo File",
        "credentials": {
          "openAiApi": {
            "id": "Ns5Dn4K7TRUo6yE8",
            "name": "OpenAi - Dani"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "const groupedByClass = {};\n\n// Percorre os itens e agrupa os Markdown por classe\nfor (const item of items) {\n  const className = item.json.output.class;\n  const markdown = item.json.output.markdown;\n  \n  if (!groupedByClass[className]) {\n    // Se a classe ainda n√£o existe, inicializa com o t√≠tulo principal\n    groupedByClass[className] = `# ${className}\\n\\n`;\n  }\n  \n  // Concatena os textos de cada subclasse dentro da mesma classe\n  groupedByClass[className] += markdown.replace(`# ${className}`, '').trim() + \"\\n\\n\";\n}\n\n// Converte os resultados para um array de sa√≠da\nconst output = Object.keys(groupedByClass).map(className => {\n  return {\n    json: {\n      class: className,\n      markdown: groupedByClass[className].trim()  // Remove espa√ßos extras no final\n    }\n  };\n});\n\nreturn output;"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          3300,
          -220
        ],
        "id": "b53f59dd-0fbb-47b3-b625-484ece2c1948",
        "name": "Class"
      },
      {
        "parameters": {
          "operation": "toText",
          "sourceProperty": "markdown",
          "options": {
            "fileName": "={{ $json.class }}.md"
          }
        },
        "type": "n8n-nodes-base.convertToFile",
        "typeVersion": 1.1,
        "position": [
          3520,
          -220
        ],
        "id": "84f3beed-7644-4f11-82d3-ceeb26394997",
        "name": "Convert to File"
      },
      {
        "parameters": {
          "authentication": "oAuth2",
          "resource": "file",
          "operation": "edit",
          "owner": {
            "__rl": true,
            "value": "blips-ai",
            "mode": "name"
          },
          "repository": {
            "__rl": true,
            "value": "assistant-blipsRH-Dani",
            "mode": "name"
          },
          "filePath": "=vector_store/{{ $binary.data.fileName }}",
          "binaryData": true,
          "commitMessage": "=Atualiza√ß√£o Base Conhecimento - {{ $binary.data.fileName }} - {{ $now.format('dd/MM/yyyy - HH:mm') }}"
        },
        "type": "n8n-nodes-base.github",
        "typeVersion": 1,
        "position": [
          3740,
          -400
        ],
        "id": "d0e7d22e-4390-432e-88b0-8b3077cd3b4a",
        "name": "GitHub",
        "webhookId": "7402dbca-46b1-472f-9192-8b3569d05035",
        "credentials": {
          "githubOAuth2Api": {
            "id": "t73yiC13xLlYtLRb",
            "name": "GitHub blips-ai"
          }
        }
      },
      {
        "parameters": {
          "method": "POST",
          "url": "=https://api.openai.com/v1/vector_stores/{{ $('Vector Store').first().json.vs_id }}/files",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "OpenAI-Beta",
                "value": "assistants=v2"
              }
            ]
          },
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "file_id",
                "value": "={{ $json.id }}"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          3940,
          -220
        ],
        "id": "9d77567e-48a0-495d-887e-8d13aaf68b44",
        "name": "Add Vector Store",
        "retryOnFail": true,
        "credentials": {
          "openAiApi": {
            "id": "Ns5Dn4K7TRUo6yE8",
            "name": "OpenAi - Dani"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict",
              "version": 2
            },
            "conditions": [
              {
                "id": "7d4bf695-2aa0-4259-99a5-a2ffa7ae65ee",
                "leftValue": "={{ $('Vazio').first().json.vazio && !$json.isEmpty() }}",
                "rightValue": "",
                "operator": {
                  "type": "boolean",
                  "operation": "false",
                  "singleValue": true
                }
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "type": "n8n-nodes-base.if",
        "typeVersion": 2.2,
        "position": [
          4620,
          -220
        ],
        "id": "8fe7ad14-b815-4464-a9da-ccf4661d640d",
        "name": "Tem arquivo pra deletar?"
      },
      {
        "parameters": {
          "method": "DELETE",
          "url": "=https://api.openai.com/v1/vector_stores/{{ $('Vector Store').first().json.vs_id }}/files/{{ $json.ids }}",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "OpenAI-Beta",
                "value": "assistants=v2"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          4860,
          -340
        ],
        "id": "d800eeb6-7cc2-42f1-b51f-7a1e1cf85311",
        "name": "DELETE Vector Store File",
        "retryOnFail": true,
        "credentials": {
          "openAiApi": {
            "id": "Ns5Dn4K7TRUo6yE8",
            "name": "OpenAi - Dani"
          }
        }
      },
      {
        "parameters": {
          "resource": "file",
          "operation": "deleteFile",
          "fileId": {
            "__rl": true,
            "value": "={{ $json.id }}",
            "mode": "id"
          }
        },
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "typeVersion": 1.8,
        "position": [
          5080,
          -340
        ],
        "id": "e11bccd0-d0f4-49fa-95ee-62144cf4702e",
        "name": "OpenAI",
        "credentials": {
          "openAiApi": {
            "id": "Ns5Dn4K7TRUo6yE8",
            "name": "OpenAi - Dani"
          }
        },
        "onError": "continueErrorOutput"
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "779c793c-53bb-4700-afe8-d950f7c0987a",
                "name": "sucesso",
                "value": true,
                "type": "boolean"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          5300,
          -200
        ],
        "id": "56043efa-0835-4c53-b2f1-0f4a00ba7fd0",
        "name": "Sucesso",
        "executeOnce": true
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "98e46ed4-7b08-4297-a21d-1bede22b48fe",
                "name": "ids",
                "value": "={{ $('Arquivos Vector Store').first().json.data.map(item => item.id)}}",
                "type": "array"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          4140,
          -220
        ],
        "id": "aebef38d-d306-40b7-b03f-a7a07f0bba20",
        "name": "IDs remover",
        "executeOnce": true
      },
      {
        "parameters": {
          "url": "=https://api.openai.com/v1/files/{{ $json.ids }}",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "options": {}
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          4820,
          400
        ],
        "id": "9eaa0d94-fe9d-439a-9e99-4cf5ead426ec",
        "name": "Get file name",
        "credentials": {
          "openAiApi": {
            "id": "Ns5Dn4K7TRUo6yE8",
            "name": "OpenAi - Dani"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict",
              "version": 2
            },
            "conditions": [
              {
                "id": "5aadb633-8b6d-4eda-b283-3d18f87b6fe7",
                "leftValue": "={{ $json.filename }}",
                "rightValue": "Regras de Atendimento.md",
                "operator": {
                  "type": "string",
                  "operation": "equals",
                  "name": "filter.operator.equals"
                }
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "type": "n8n-nodes-base.if",
        "typeVersion": 2.2,
        "position": [
          5000,
          400
        ],
        "id": "6b5940c9-e8b2-4175-ae99-cc9877d0c2f9",
        "name": "Deletar?"
      },
      {
        "parameters": {
          "operation": "download",
          "fileId": {
            "__rl": true,
            "value": "={{ $('Files - Drive').item.json.id }}",
            "mode": "id"
          },
          "options": {
            "googleFileConversion": {
              "conversion": {
                "docsToFormat": "application/pdf",
                "drawingsToFormat": "application/pdf",
                "slidesToFormat": "application/pdf",
                "sheetsToFormat": "application/pdf"
              }
            }
          }
        },
        "type": "n8n-nodes-base.googleDrive",
        "typeVersion": 3,
        "position": [
          840,
          -100
        ],
        "id": "425c4817-ae9d-40d8-b4f7-f3f5c7ac38e8",
        "name": "Google Drive1",
        "credentials": {
          "googleDriveOAuth2Api": {
            "id": "3lQM3JcoG2K4jAcw",
            "name": "Drive - IA Blips"
          }
        }
      },
      {
        "parameters": {
          "fieldToSplitOut": "ids",
          "options": {}
        },
        "type": "n8n-nodes-base.splitOut",
        "typeVersion": 1,
        "position": [
          4380,
          -220
        ],
        "id": "9780e7b1-b23f-4523-904c-19daf0cf71cd",
        "name": "Separa 1 a 1"
      },
      {
        "parameters": {
          "modelName": "models/gemini-2.0-flash-thinking-exp",
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "typeVersion": 1,
        "position": [
          2000,
          200
        ],
        "id": "ff11c8d9-ff4a-494c-a553-fba1372537e5",
        "name": "Google Gemini Chat Model",
        "credentials": {
          "googlePalmApi": {
            "id": "dEFEg2kO4UqiadKK",
            "name": "motor n8n"
          }
        }
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "20902422-96b1-49fe-8d31-3cf40033e1e7",
                "name": "vs_id",
                "value": "={{ \n  $('Get Assistant').all().map(item => item.json.tool_resources?.file_search?.vector_store_ids?.[0]) \n}}\n",
                "type": "string"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          -380,
          -120
        ],
        "id": "b9b79094-799b-46d8-aa31-b508ddd3fd00",
        "name": "Vector Store",
        "executeOnce": true
      }
    ],
    "connections": {
      "Execute": {
        "main": [
          [
            {
              "node": "Get Assistant",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Assistant": {
        "main": [
          [
            {
              "node": "Vector Store",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Arquivos Vector Store": {
        "main": [
          [
            {
              "node": "Vazio",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Vazio": {
        "main": [
          [
            {
              "node": "Files - Drive",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Files - Drive": {
        "main": [
          [
            {
              "node": "Drive vazio?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Drive vazio?": {
        "main": [
          [
            {
              "node": "Erro",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Google Drive1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract from File": {
        "main": [
          [
            {
              "node": "Se√ß√µes Arquivo",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Se√ß√µes Arquivo": {
        "main": [
          [
            {
              "node": "Split Out",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Out": {
        "main": [
          [
            {
              "node": "Se√ß√£o",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Basic LLM Chain": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ],
          [
            {
              "node": "Erro - LLM",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Classifica√ß√£o": {
        "main": [
          [
            {
              "node": "Subclass",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge": {
        "main": [
          [
            {
              "node": "Classifica√ß√£o",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Se√ß√£o": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            },
            {
              "node": "Basic LLM Chain",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Basic LLM Chain",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Subclass": {
        "main": [
          [
            {
              "node": "Basic LLM Chain1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser1": {
        "ai_outputParser": [
          [
            {
              "node": "Basic LLM Chain1",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Class": {
        "main": [
          [
            {
              "node": "Convert to File",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Convert to File": {
        "main": [
          [
            {
              "node": "Upload Novo File",
              "type": "main",
              "index": 0
            },
            {
              "node": "GitHub",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Basic LLM Chain1": {
        "main": [
          [
            {
              "node": "Class",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Erro - LLM",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Add Vector Store": {
        "main": [
          [
            {
              "node": "IDs remover",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Upload Novo File": {
        "main": [
          [
            {
              "node": "Add Vector Store",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Tem arquivo pra deletar?": {
        "main": [
          [
            {
              "node": "DELETE Vector Store File",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Sucesso",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "DELETE Vector Store File": {
        "main": [
          [
            {
              "node": "OpenAI",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI": {
        "main": [
          [
            {
              "node": "Sucesso",
              "type": "main",
              "index": 0
            }
          ],
          []
        ]
      },
      "IDs remover": {
        "main": [
          [
            {
              "node": "Separa 1 a 1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get file name": {
        "main": [
          [
            {
              "node": "Deletar?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Deletar?": {
        "main": [
          [],
          []
        ]
      },
      "Google Drive1": {
        "main": [
          [
            {
              "node": "Extract from File",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Separa 1 a 1": {
        "main": [
          [
            {
              "node": "Tem arquivo pra deletar?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Gemini Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Basic LLM Chain",
              "type": "ai_languageModel",
              "index": 0
            },
            {
              "node": "Basic LLM Chain1",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Vector Store": {
        "main": [
          [
            {
              "node": "Arquivos Vector Store",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {
      "Execute": [
        {
          "json": {
            "query": "atualizar conhecimento"
          }
        }
      ]
    },
    "versionId": "9a61c273-0ffd-45a6-ab15-00f906abc06c",
    "triggerCount": 0,
    "tags": []
  }
}