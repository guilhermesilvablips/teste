{
  "data": {
    "createdAt": "2025-04-17T17:18:20.638Z",
    "updatedAt": "2025-04-30T17:33:49.433Z",
    "id": "8Y8tON32Xp08Ov23",
    "name": "Ganhos Dalila",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          -1420,
          -580
        ],
        "id": "f8370369-980e-4269-8a3a-9045e35810e6",
        "name": "When clicking ‘Test workflow’"
      },
      {
        "parameters": {
          "documentId": {
            "__rl": true,
            "value": "19mIBStrNKbUGPU88nbqPsDW540AIEH99m7cpqlE1lks",
            "mode": "list",
            "cachedResultName": "Negociações Mensais_Negociações_Tabela dinâmica",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/19mIBStrNKbUGPU88nbqPsDW540AIEH99m7cpqlE1lks/edit?usp=drivesdk"
          },
          "sheetName": {
            "__rl": true,
            "value": 2103259735,
            "mode": "list",
            "cachedResultName": "Dalila",
            "cachedResultUrl": "https://docs.google.com/spreadsheets/d/19mIBStrNKbUGPU88nbqPsDW540AIEH99m7cpqlE1lks/edit#gid=2103259735"
          },
          "options": {}
        },
        "type": "n8n-nodes-base.googleSheets",
        "typeVersion": 4.5,
        "position": [
          -1420,
          340
        ],
        "id": "bc729415-ec10-4ba7-878f-765a27f940ed",
        "name": "Google Sheets",
        "credentials": {
          "googleSheetsOAuth2Api": {
            "id": "f53eDeTWUXii9mLz",
            "name": "Google Sheets Mateus"
          }
        }
      },
      {
        "parameters": {
          "options": {}
        },
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 3,
        "position": [
          -1200,
          340
        ],
        "id": "d7df4ed5-3f99-4b81-af65-153019441b28",
        "name": "Loop Over Items"
      },
      {
        "parameters": {
          "operation": "search",
          "term": "={{ $json['Contrato - CNPJ/CPF'].split(' - ')[1].trim() }}",
          "limit": 1,
          "additionalFields": {
            "fields": [
              "custom_fields",
              "notes",
              "title"
            ],
            "status": "won"
          }
        },
        "type": "n8n-nodes-base.pipedrive",
        "typeVersion": 1,
        "position": [
          -980,
          340
        ],
        "id": "383225c2-f1cb-4d08-8048-7bbe5f23db31",
        "name": "Pipedrive",
        "credentials": {
          "pipedriveApi": {
            "id": "6OXvSBSLEYwmYiBv",
            "name": "Pipedrive account"
          }
        }
      },
      {
        "parameters": {
          "url": "https://n8n-auditoria.blips-labs.com/webhook/search_protocols_by_phone",
          "sendQuery": true,
          "queryParameters": {
            "parameters": [
              {
                "name": "phone",
                "value": "={{ $json.title.split(' | ')[1].trim() }}"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          -760,
          340
        ],
        "id": "59b28ea4-010f-46b9-97f9-6e2b6708c6e0",
        "name": "buscar protocolo"
      },
      {
        "parameters": {
          "operation": "getAll",
          "returnAll": true,
          "filters": {
            "filter_id": "=3527"
          }
        },
        "type": "n8n-nodes-base.pipedrive",
        "typeVersion": 1,
        "position": [
          -1122,
          -320
        ],
        "id": "6c543f70-8725-41be-9d9c-39f515398d45",
        "name": "buscar leads qualificação",
        "credentials": {
          "pipedriveApi": {
            "id": "6OXvSBSLEYwmYiBv",
            "name": "Pipedrive account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// pega todos os itens que vieram no input\nconst leads = $input.all().map(item => item.json);\n\n// calcula total de leads\nconst totalLeads = leads.length;\n\n// filtra apenas os leads com status \"won\"\nconst wonLeads = leads.filter(lead => lead.status === 'won').length;\n\n// calcula a taxa de conversão (decimal)\nconst conversionRate = totalLeads > 0 \n  ? wonLeads / totalLeads \n  : 0;\n\n// opcional: taxa de conversão em percentual com 2 casas decimais\nconst conversionRatePct = (conversionRate * 100).toFixed(2) + '%';\n\n// retorna um único objeto com as métricas\nreturn [{\n  json: {\n    totalLeads,\n    wonLeads,\n    conversionRate,    // ex: 0.25\n    conversionRatePct  // ex: \"25.00%\"\n  }\n}];\n"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -824,
          -320
        ],
        "id": "31a05f84-48ed-44ac-8302-6c607faefc1d",
        "name": "Code"
      },
      {
        "parameters": {
          "operation": "getAll",
          "returnAll": true,
          "filters": {
            "filter_id": "=3018"
          }
        },
        "type": "n8n-nodes-base.pipedrive",
        "typeVersion": 1,
        "position": [
          -604,
          -320
        ],
        "id": "f18dc391-66ae-4862-8dac-b6847fde606c",
        "name": "buscar leads ganhos",
        "credentials": {
          "pipedriveApi": {
            "id": "6OXvSBSLEYwmYiBv",
            "name": "Pipedrive account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// pega todos os itens que vieram no input\nconst leads = $input.all().map(item => item.json);\n\n// calcula total de leads\nconst totalLeads = leads.length;\n\n// filtra apenas os leads com status \"won\"\nconst wonLeads = leads.filter(lead => lead.status === 'won').length;\n\n// calcula a taxa de conversão (decimal)\nconst conversionRate = totalLeads > 0 \n  ? wonLeads / totalLeads \n  : 0;\n\n// opcional: taxa de conversão em percentual com 2 casas decimais\nconst conversionRatePct = (conversionRate * 100).toFixed(2) + '%';\n\n// retorna um único objeto com as métricas\nreturn [{\n  json: {\n    totalLeads,\n    wonLeads,\n    conversionRate,    // ex: 0.25\n    conversionRatePct  // ex: \"25.00%\"\n  }\n}];\n"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -384,
          -320
        ],
        "id": "61271385-b41d-454f-99f3-3c5f411346f9",
        "name": "Code1"
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "87fcf36f-1aea-46c1-85e4-b40f7221bd6b",
                "name": "totalLeads",
                "value": "={{ $('Code').last().json.totalLeads }}",
                "type": "string"
              },
              {
                "id": "9b327ec0-16a4-470d-9432-df1f711c1338",
                "name": "ganhosSDR",
                "value": "={{ $('Code').last().json.wonLeads }}",
                "type": "string"
              },
              {
                "id": "3cbda307-85de-4ac6-a23b-5cb9187d51f9",
                "name": "%ganhosSDR",
                "value": "={{ $('Code').last().json.conversionRatePct }}",
                "type": "string"
              },
              {
                "id": "ea3531fb-3911-484e-b4d5-ceeec7a31879",
                "name": "totalVendas",
                "value": "={{ $json.wonLeads }}",
                "type": "string"
              },
              {
                "id": "9cb8e8d5-2345-43ef-bb82-b8b0f72c0cba",
                "name": "%vendasQualificados",
                "value": "={{ ($json.wonLeads/$('Code').last().json.wonLeads*100).toString().substring(0,4) }}%",
                "type": "string"
              },
              {
                "id": "e619a6d4-f74b-499f-b8e8-1a72d77a2890",
                "name": "%vendas",
                "value": "={{ ($json.wonLeads/$('Code').last().json.totalLeads*100).toString().substring(0,4) }}%",
                "type": "string"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          -164,
          -320
        ],
        "id": "36cd2398-4f23-4b48-9c17-fd3bd67efb7a",
        "name": "Edit Fields"
      },
      {
        "parameters": {
          "operation": "getAll",
          "returnAll": true,
          "filters": {
            "filter_id": "=3527"
          }
        },
        "type": "n8n-nodes-base.pipedrive",
        "typeVersion": 1,
        "position": [
          -980,
          -580
        ],
        "id": "ea678b5a-d115-4d90-9979-bcaa130c5069",
        "name": "buscar leads qualificação1",
        "credentials": {
          "pipedriveApi": {
            "id": "6OXvSBSLEYwmYiBv",
            "name": "Pipedrive account"
          }
        }
      },
      {
        "parameters": {
          "operation": "getAll",
          "returnAll": true,
          "filters": {
            "filter_id": "=3528"
          }
        },
        "type": "n8n-nodes-base.pipedrive",
        "typeVersion": 1,
        "position": [
          -320,
          -580
        ],
        "id": "67e105bb-1bd5-4909-89d6-5519038387fc",
        "name": "buscar leads ganhos1",
        "credentials": {
          "pipedriveApi": {
            "id": "6OXvSBSLEYwmYiBv",
            "name": "Pipedrive account"
          }
        }
      },
      {
        "parameters": {
          "aggregate": "aggregateAllItemData",
          "destinationFieldName": "leads",
          "options": {}
        },
        "type": "n8n-nodes-base.aggregate",
        "typeVersion": 1,
        "position": [
          -540,
          -580
        ],
        "id": "16d60ba8-f989-4f39-aac5-90b05193930a",
        "name": "leads_qualificacao"
      },
      {
        "parameters": {
          "aggregate": "aggregateAllItemData",
          "destinationFieldName": "ganhos",
          "options": {}
        },
        "type": "n8n-nodes-base.aggregate",
        "typeVersion": 1,
        "position": [
          140,
          -580
        ],
        "id": "1f73ffcc-de6f-49dc-81fe-08a5a29ca08b",
        "name": "leads_ganhos"
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "6e787f09-8676-4f76-a876-8507a24b07f1",
                "name": "ganhos",
                "value": "={{ $json.ganhos }}",
                "type": "array"
              },
              {
                "id": "fd033bdf-baa1-4a09-ad29-2362b57d64d5",
                "name": "leads",
                "value": "={{ $('leads_qualificacao').item.json.leads }}",
                "type": "array"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          360,
          -580
        ],
        "id": "082c4c42-ce20-4167-ae31-1d9d704d5961",
        "name": "Edit Fields2"
      },
      {
        "parameters": {
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 1.8,
        "position": [
          -1200,
          -120
        ],
        "id": "2866c0fb-dad6-4d71-aac0-f1e918248c87",
        "name": "AI Agent"
      },
      {
        "parameters": {
          "model": {
            "__rl": true,
            "value": "o3-mini",
            "mode": "list",
            "cachedResultName": "o3-mini"
          },
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "typeVersion": 1.2,
        "position": [
          -1172,
          100
        ],
        "id": "50c600fa-34ef-4cbb-8fb8-5d6dcb98b499",
        "name": "OpenAI Chat Model",
        "credentials": {
          "openAiApi": {
            "id": "U8lLxccdmdeAdSW0",
            "name": "OpenAi account - Dalila"
          }
        }
      },
      {
        "parameters": {
          "jsCode": ""
        },
        "type": "@n8n/n8n-nodes-langchain.toolCode",
        "typeVersion": 1.1,
        "position": [
          -1052,
          100
        ],
        "id": "c6a3eaae-f7a7-4f2e-9c94-6f2ba2e064a9",
        "name": "Code Tool"
      },
      {
        "parameters": {},
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3.1,
        "position": [
          56,
          -320
        ],
        "id": "f592ac45-af85-49d0-99c4-e01c2c5b4ce7",
        "name": "Merge"
      },
      {
        "parameters": {
          "fieldsToAggregate": {
            "fieldToAggregate": [
              {}
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.aggregate",
        "typeVersion": 1,
        "position": [
          276,
          -320
        ],
        "id": "4a8635bb-938b-468b-9f44-8d1ca5a04dca",
        "name": "Aggregate"
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "5b2667b0-87d1-4f42-9dea-f84d815c97eb",
                "name": "dataStart",
                "value": "",
                "type": "string"
              },
              {
                "id": "55740aaf-a322-4ab5-9612-cec4eb1176f7",
                "name": "dataEnd",
                "value": "",
                "type": "string"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          -1200,
          -580
        ],
        "id": "e9e51ddd-0ab9-477b-be5f-17a68427d5d8",
        "name": "variaveis"
      },
      {
        "parameters": {
          "jsCode": "// Recebe os dois arrays do JSON de entrada\nconst allLeads    = $json.leads    || [];\nconst clientLeads = $json.ganhos   || [];\n\n// Campo único de identificação\nconst keyField = 'dbd50585569b32f725c54c41c16486be2f1899fc';\n\n// 1) Total de leads\nconst totalLeads = allLeads.length;\n\n// 2) Total de leads qualificados (status \"won\")\nconst qualifiedLeads = allLeads.filter(lead => lead.status === 'won').length;\n\n// 3) % de qualificações\nconst qualificationRate = totalLeads > 0 \n  ? qualifiedLeads / totalLeads \n  : 0;\nconst qualificationRatePct = (qualificationRate * 100).toFixed(2) + '%';\n\n// 4) Total de clientes (leads ganhos via filtro)\nconst totalSales = clientLeads.length;\n\n// 5) Total de vendas Dalila (interseção entre qualificados e ganhos)\nconst leadIdSet = new Set(allLeads.map(item => item[keyField]));\nconst totalSalesDalila = clientLeads.filter(lead => leadIdSet.has(lead[keyField])).length;\n\n// 6) % de vendas sobre o total de leads\nconst salesRateDalila = totalLeads > 0 \n  ? totalSalesDalila / totalLeads \n  : 0;\nconst salesRatePctDalila = (salesRateDalila * 100).toFixed(2) + '%';\n\n// 7) % de vendas Dalila em relação aos leads qualificados\nconst salesRateDalilaQualified = qualifiedLeads > 0\n  ? totalSalesDalila / qualifiedLeads\n  : 0;\nconst salesRatePctDalilaQualified = (salesRateDalilaQualified * 100).toFixed(2) + '%';\n\n// Retorna um único objeto com todas as métricas\nreturn [{\n  json: {\n    totalLeads,\n    qualifiedLeads,\n    qualificationRate,\n    qualificationRatePct,\n    totalSales,\n    totalSalesDalila,\n    salesRateDalila,\n    salesRatePctDalila,\n    salesRateDalilaQualified,\n    salesRatePctDalilaQualified\n  }\n}];\n"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          580,
          -580
        ],
        "id": "d96d7f20-b052-4af9-9d7f-47a9a62c8898",
        "name": "dados_conversao"
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict",
              "version": 2
            },
            "conditions": [
              {
                "id": "581c8961-6223-4629-8bb0-8eb06030a3a6",
                "leftValue": "",
                "rightValue": "",
                "operator": {
                  "type": "string",
                  "operation": "equals",
                  "name": "filter.operator.equals"
                }
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "type": "n8n-nodes-base.if",
        "typeVersion": 2.2,
        "position": [
          -1420,
          -170
        ],
        "id": "409084df-9e03-4404-b81d-3b7f245a6ed2",
        "name": "If"
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict",
              "version": 2
            },
            "conditions": [
              {
                "id": "b5b23a4b-8796-4721-a2f9-b087a53029f4",
                "leftValue": "={{ !!$('variaveis').item.json.dataStart ? $json.add_time.toDateTime() : '2025-01-01'.toDateTime() }}",
                "rightValue": "={{ !!$('variaveis').item.json.dataStart ? $('variaveis').item.json.dataStart.toDateTime() : '2025-01-01'.toDateTime() }}",
                "operator": {
                  "type": "dateTime",
                  "operation": "afterOrEquals"
                }
              },
              {
                "id": "61f80e4a-666a-4c46-8206-4fa5e780d55b",
                "leftValue": "={{ !!$('variaveis').item.json.dataEnd ? $json.add_time.toDateTime() : '2025-01-01'.toDateTime() }}",
                "rightValue": "={{ !!$('variaveis').item.json.dataEnd ? $('variaveis').item.json.dataEnd.toDateTime() : '2025-01-01'.toDateTime() }}",
                "operator": {
                  "type": "dateTime",
                  "operation": "beforeOrEquals"
                }
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "type": "n8n-nodes-base.filter",
        "typeVersion": 2.2,
        "position": [
          -760,
          -580
        ],
        "id": "bc2b105f-4025-4ccc-b0bc-9d3d87341461",
        "name": "filtrar_periodo_leads"
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict",
              "version": 2
            },
            "conditions": [
              {
                "id": "b5b23a4b-8796-4721-a2f9-b087a53029f4",
                "leftValue": "={{ !!$('variaveis').item.json.dataStart ? $json.won_time.toDateTime() : '2025-01-01'.toDateTime() }}",
                "rightValue": "={{ !!$('variaveis').item.json.dataStart ? $('variaveis').item.json.dataStart.toDateTime() : '2025-01-01'.toDateTime() }}",
                "operator": {
                  "type": "dateTime",
                  "operation": "afterOrEquals"
                }
              },
              {
                "id": "61f80e4a-666a-4c46-8206-4fa5e780d55b",
                "leftValue": "={{ !!$('variaveis').item.json.dataEnd ? $json.won_time.toDateTime() : '2025-01-01'.toDateTime() }}",
                "rightValue": "={{ !!$('variaveis').item.json.dataEnd ? $('variaveis').item.json.dataEnd.toDateTime() : '2025-01-01'.toDateTime() }}",
                "operator": {
                  "type": "dateTime",
                  "operation": "beforeOrEquals"
                }
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "type": "n8n-nodes-base.filter",
        "typeVersion": 2.2,
        "position": [
          -100,
          -580
        ],
        "id": "04604723-6866-4ee3-b111-04bea98f9195",
        "name": "filtrar_periodo_ganhos"
      }
    ],
    "connections": {
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "variaveis",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Sheets": {
        "main": [
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Loop Over Items": {
        "main": [
          [],
          [
            {
              "node": "Pipedrive",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Pipedrive": {
        "main": [
          [
            {
              "node": "buscar protocolo",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "buscar leads qualificação": {
        "main": [
          [
            {
              "node": "Code",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Code": {
        "main": [
          [
            {
              "node": "buscar leads ganhos",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "buscar leads ganhos": {
        "main": [
          [
            {
              "node": "Code1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Code1": {
        "main": [
          [
            {
              "node": "Edit Fields",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "buscar leads qualificação1": {
        "main": [
          [
            {
              "node": "filtrar_periodo_leads",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "buscar leads ganhos1": {
        "main": [
          [
            {
              "node": "filtrar_periodo_ganhos",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "leads_qualificacao": {
        "main": [
          [
            {
              "node": "buscar leads ganhos1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "leads_ganhos": {
        "main": [
          [
            {
              "node": "Edit Fields2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Edit Fields2": {
        "main": [
          [
            {
              "node": "dados_conversao",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Code Tool": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "AI Agent": {
        "main": [
          []
        ]
      },
      "Edit Fields": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Merge": {
        "main": [
          [
            {
              "node": "Aggregate",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "variaveis": {
        "main": [
          [
            {
              "node": "buscar leads qualificação1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "dados_conversao": {
        "main": [
          []
        ]
      },
      "If": {
        "main": [
          [
            {
              "node": "buscar leads qualificação",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "filtrar_periodo_leads": {
        "main": [
          [
            {
              "node": "leads_qualificacao",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "filtrar_periodo_ganhos": {
        "main": [
          [
            {
              "node": "leads_ganhos",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1",
      "timezone": "America/Sao_Paulo",
      "callerPolicy": "workflowsFromSameOwner"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "a7e0b32f-5b75-4027-9660-1bb1e23a1bf8",
    "triggerCount": 0,
    "tags": []
  }
}