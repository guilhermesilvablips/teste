{
  "data": {
    "createdAt": "2025-04-17T19:34:32.118Z",
    "updatedAt": "2025-04-17T19:56:48.586Z",
    "id": "JNI6kGPVzZeL6xDC",
    "name": "Teste execução de código por agentes",
    "active": false,
    "nodes": [
      {
        "parameters": {
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.chatTrigger",
        "typeVersion": 1.1,
        "position": [
          -580,
          -520
        ],
        "id": "7635fecf-a4a0-4013-bd47-1b4d54a49d47",
        "name": "When chat message received",
        "webhookId": "1f3122a0-a98e-4dd5-9c23-a7cd48b5a9c8"
      },
      {
        "parameters": {
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 1.8,
        "position": [
          -328,
          -520
        ],
        "id": "db5e0208-d462-468e-bd13-7d107e37b030",
        "name": "AI Agent"
      },
      {
        "parameters": {
          "model": {
            "__rl": true,
            "value": "gpt-4.1",
            "mode": "list",
            "cachedResultName": "gpt-4.1"
          },
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "typeVersion": 1.2,
        "position": [
          -380,
          -300
        ],
        "id": "fe32fd80-1880-4b36-a2a1-f1bdd7f7b4ee",
        "name": "OpenAI Chat Model",
        "credentials": {
          "openAiApi": {
            "id": "utH6piS62wyaw3eE",
            "name": "1Clara - DEV"
          }
        }
      },
      {
        "parameters": {
          "name": "code_execution",
          "description": "Chame essa função quando eu te mandar executar um código js, eu vou te passar o código a ser executado.",
          "jsCode": "// --- executor genérico que aceita expressão OU bloco completo ---\nconst isBloco = /[;{}=]|return\\b/.test(query.codigo.replaceAll('\\n', ''));\n\nconst corpo = isBloco\n  ? '\"use strict\";\\n' + query.codigo                      // bloco completo\n  : '\"use strict\";\\nreturn (' + query.codigo + ');';      // expressão\n\nconst resultado = Function(corpo)();\n\n// Se for objeto/array → JSON pretty; senão → string simples\nif (resultado !== null && typeof resultado === \"object\") {\n  return JSON.stringify(resultado, null, 2);   // 2 espaços de identação\n}\nreturn String(resultado ?? \"\");",
          "specifyInputSchema": true,
          "schemaType": "manual",
          "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"codigo\": {\n      \"type\": \"string\",\n      \"description\": \"Trecho de código a ser executado como corpo de uma função. **Não inclua a declaração da função, nem chaves de abertura ou fechamento**. Apenas o corpo interno da função, com comandos diretos e `return` no final, por exemplo:\\n\\n`const a = 2;\\nconst b = 3;\\nreturn a + b;`\\n\\n⚠️ **Não envie assim**:\\n`function exemplo() { const a = 2; return a; }`\"\n    }\n  }\n}"
        },
        "type": "@n8n/n8n-nodes-langchain.toolCode",
        "typeVersion": 1.1,
        "position": [
          -120,
          -300
        ],
        "id": "a76eb010-78be-46bf-8ae1-eafe2d0bef2b",
        "name": "Code Tool"
      },
      {
        "parameters": {},
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "typeVersion": 1.3,
        "position": [
          -240,
          -300
        ],
        "id": "49cfafd4-9dea-4578-a904-8fc2a8b1adad",
        "name": "Simple Memory"
      }
    ],
    "connections": {
      "When chat message received": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Code Tool": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Simple Memory": {
        "ai_memory": [
          [
            {
              "node": "AI Agent",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "3859d6a2-f9f5-4bc4-91dc-86102383f3c9",
    "triggerCount": 0,
    "tags": []
  }
}